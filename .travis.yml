language: cpp
sudo: false
notifications:
  email: false

# Use Linux unless specified otherwise
os: linux
dist: trusty

cache: ccache

matrix:
  include:

    - os: windows
      env: COMPILER=cl.exe

    ##########################################################################
    # Clang on OSX
    # Travis seems to take longer to start OSX instances,
    # so leave this first for the overall build to be faster
    ##########################################################################

    # XCode 8.3
    - env: COMPILER=clang++
      os: osx
      osx_image: xcode8.3
      compiler: clang

    # XCode 9.1
    - env: COMPILER=clang++
      os: osx
      osx_image: xcode9.1
      compiler: clang

    ##########################################################################
    # Clang on Linux
    ##########################################################################

    # Clang 3.6
    - env: COMPILER=clang++-3.6
      addons: &clang36
        apt:
          packages:
            - clang-3.6
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6

    # Clang 3.7
    - env: COMPILER=clang++-3.7
      addons: &clang37
        apt:
          packages:
            - clang-3.7
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7

    # Clang 3.8
    - env: COMPILER=clang++-3.8
      addons: &clang38
        apt:
          packages:
            - clang-3.8
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8

    # Clang 3.9
    - env: COMPILER=clang++-3.9
      addons: &clang39
        apt:
          packages:
            - clang-3.9
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.9

    # Clang 4.0
    - env: COMPILER=clang++-4.0
      addons: &clang40
        apt:
          packages:
            - clang-4.0
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0

    # Clang 5.0
    - env: COMPILER=clang++-5.0
      addons: &clang50
        apt:
          packages:
            - clang-5.0
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-5.0 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # Clang 6.0
    - env: COMPILER=clang++-6.0
      addons: &clang60
        apt:
          packages:
            - clang-6.0
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-6.0
            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-6.0 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # Clang 7.0
    - env: COMPILER=clang++-7
      addons: &clang70
        apt:
          packages:
            - clang-7
            - g++-7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-7


    ##########################################################################
    # GCC on Linux
    ##########################################################################

    # GCC 5
    - env: COMPILER=g++-5
      addons: &gcc5
        apt:
          packages: g++-5
          sources:
            - ubuntu-toolchain-r-test

    # GCC 6
    - env: COMPILER=g++-6
      addons: &gcc6
        apt:
          packages: g++-6
          sources:
            - ubuntu-toolchain-r-test

    # GCC 7
    - env: COMPILER=g++-7
      addons: &gcc7
        apt:
          packages: g++-7
          sources:
            - ubuntu-toolchain-r-test

install:
  # Set the ${CXX} variable properly
  - export CXX=${COMPILER}
  - ${CXX} --version

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  # Travis machines have 2 cores
  - JOBS=2

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - CMAKE_VERSION=3.7.2
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install cmake || brew upgrade cmake
      brew install --HEAD ccache
    fi
  - cmake --version

  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    # if in linux and compiler clang and llvm not installed
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL})" ]]; then
      if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      fi
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi

before_script:
  # have CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  # -DLLVM_CCACHE_BUILD=ON
  - cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_APPEND_VC_REV=OFF -DBUILD_SHARED_LIBS=ON -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_OPTIMIZED_TABLEGEN=ON -DLLVM_CCACHE_BUILD=ON '-DLLVM_ENABLE_PROJECTS=clang;compiler-rt' -DLLVM_USE_SPLIT_DWARF=ON -DLLVM_ENABLE_LLD=ON
  
script:
  # build and run tests
  - cmake --build . -- -j${JOBS}
  #- make check-clang
  - ./bin/clang -v -fsyntax-only ../lifetime-attr-test.cpp

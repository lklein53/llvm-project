language: cpp
notifications:
  email: false

cache: ccache

matrix:
  include:

    - os: windows
      env: CMAKE_OPTIONS="-Thost=x64"

    #- os: osx
    #  osx_image: xcode8.3
    #  compiler: clang
    #  env: BUILD_OPTIONS="-j2"

    - os: osx
      osx_image: xcode9.1
      compiler: clang
      env: BUILD_OPTIONS="-j3 clang"

    - os: linux
      dist: xenial
      compiler: clang
      env: BUILD_OPTIONS="-j3 clang" CMAKE_OPTIONS="-DLLVM_CCACHE_BUILD=ON"

install:
  # Set the ${CXX} variable properly
  #- export CXX=${COMPILER}
  #- ${CXX} --version
  #- echo | ${CXX} -E -Wp,-v -

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  #- CMAKE_VERSION=3.7.2
  #- |
  #  if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
  #    CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
  #    mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  #    export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  #  fi
  # ccache is not available on osx, install fails with "Your Xcode (8.3.3) is outdated."
  #- |
  #  if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
  #    brew install cmake || brew upgrade cmake
  #    brew install --HEAD ccache
  #  fi
  - cmake --version

  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  #- |
  #  LLVM_INSTALL=${DEPS_DIR}/llvm/install
  #  # if in linux and compiler clang and llvm not installed
  #  if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL})" ]]; then
  #    if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
  #    elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
  #    elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
  #    elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
  #    fi
  #    LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
  #    LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
  #    LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
  #    mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
  #    travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
  #    travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
  #    travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
  #    (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
  #    (cd llvm/build/projects/libcxx && make install -j2)
  #    (cd llvm/build/projects/libcxxabi && make install -j2)
  #    export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
  #    export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
  #    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
  #  fi

before_script:
  # have CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  # -DLLVM_CCACHE_BUILD=ON
  #-DCMAKE_BUILD_TYPE=Release
  - cmake ../llvm -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_TARGETS_TO_BUILD="X86" '-DLLVM_ENABLE_PROJECTS=clang;compiler-rt' -DLLVM_OPTIMIZED_TABLEGEN=ON ${CMAKE_OPTIONS}
  
script:
  # build and run tests
  - cmake --build . -- ${BUILD_OPTIONS}
  #- make check-clang
  - ./bin/clang -v -fsyntax-only ../lifetime-attr-test.cpp
